// <auto-generated />
using System;
using DebtManagerApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DebtManagerApp.API.Migrations
{
	[DbContext(typeof(DatabaseContext))]
	partial class DatabaseContextModelSnapshot : ModelSnapshot
	{
		protected override void BuildModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder
				.HasAnnotation("ProductVersion", "8.0.0")
				.HasAnnotation("Relational:MaxIdentifierLength", 63);

			NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

			modelBuilder.Entity("DebtManagerApp.Data.Category", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("integer");

				NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

				b.Property<bool>("IsDeleted")
					.HasColumnType("boolean");

				b.Property<string>("Name")
					.IsRequired()
					.HasMaxLength(256)
					.HasColumnType("character varying(256)");

				b.Property<int>("OrganizationId")
					.HasColumnType("integer");

				b.Property<int?>("ParentCategoryId")
					.HasColumnType("integer");

				b.HasKey("Id");

				b.HasIndex("OrganizationId");

				b.HasIndex("ParentCategoryId");

				b.ToTable("Categories");
			});

			modelBuilder.Entity("DebtManagerApp.Data.Customer", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("integer");

				NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

				b.Property<string>("Address")
					.HasColumnType("text");

				b.Property<DateTime>("CreatedAt")
					.HasColumnType("timestamp with time zone");

				b.Property<decimal>("DebtLimit")
					.HasColumnType("decimal(18, 2)");

				b.Property<bool>("IsDeleted")
					.HasColumnType("boolean");

				b.Property<string>("Name")
					.IsRequired()
					.HasMaxLength(256)
					.HasColumnType("character varying(256)");

				b.Property<string>("Notes")
					.HasColumnType("text");

				b.Property<int>("OrganizationId")
					.HasColumnType("integer");

				b.Property<string>("PhoneNumber")
					.IsRequired()
					.HasMaxLength(50)
					.HasColumnType("character varying(50)");

				b.Property<DateTime>("UpdatedAt")
					.HasColumnType("timestamp with time zone");

				b.HasKey("Id");

				b.HasIndex("OrganizationId");

				b.ToTable("Customers");
			});

			modelBuilder.Entity("DebtManagerApp.Data.Organization", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("integer");

				NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

				b.Property<DateTime>("CreatedAt")
					.HasColumnType("timestamp with time zone");

				b.Property<bool>("IsDeleted")
					.HasColumnType("boolean");

				b.Property<string>("Name")
					.IsRequired()
					.HasMaxLength(256)
					.HasColumnType("character varying(256)");

				b.HasKey("Id");

				b.ToTable("Organizations");
			});

			modelBuilder.Entity("DebtManagerApp.Data.OrganizationSettings", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("integer");

				NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

				b.Property<int>("CurrencyType")
					.HasColumnType("integer");

				b.Property<string>("LogoPath")
					.IsRequired()
					.HasMaxLength(1024)
					.HasColumnType("character varying(1024)");

				b.Property<int>("OrganizationId")
					.HasColumnType("integer");

				b.Property<string>("ShopName")
					.IsRequired()
					.HasMaxLength(256)
					.HasColumnType("character varying(256)");

				b.HasKey("Id");

				b.HasIndex("OrganizationId")
					.IsUnique();

				b.ToTable("OrganizationSettings");
			});

			modelBuilder.Entity("DebtManagerApp.Data.Product", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("integer");

				NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

				b.Property<int?>("CategoryId")
					.HasColumnType("integer");

				b.Property<decimal?>("CostPrice")
					.HasColumnType("decimal(18, 2)");

				b.Property<string>("Description")
					.HasMaxLength(2000)
					.HasColumnType("character varying(2000)");

				b.Property<bool>("IsDeleted")
					.HasColumnType("boolean");

				b.Property<string>("Name")
					.IsRequired()
					.HasMaxLength(256)
					.HasColumnType("character varying(256)");

				b.Property<int>("OrganizationId")
					.HasColumnType("integer");

				b.Property<decimal>("SellingPrice")
					.HasColumnType("decimal(18, 2)");

				b.Property<string>("Sku")
					.HasMaxLength(100)
					.HasColumnType("character varying(100)");

				b.Property<int>("StockQuantity")
					.HasColumnType("integer");

				b.HasKey("Id");

				b.HasIndex("CategoryId");

				b.HasIndex("OrganizationId");

				b.ToTable("Products");
			});

			modelBuilder.Entity("DebtManagerApp.Data.Sale", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("integer");

				NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

				b.Property<int?>("CustomerId")
					.HasColumnType("integer");

				b.Property<bool>("IsDeleted")
					.HasColumnType("boolean");

				b.Property<string>("Notes")
					.HasColumnType("text");

				b.Property<int>("OrganizationId")
					.HasColumnType("integer");

				b.Property<DateTime>("SaleDate")
					.HasColumnType("timestamp with time zone");

				b.Property<decimal>("TotalAmount")
					.HasColumnType("decimal(18, 2)");

				b.HasKey("Id");

				b.HasIndex("CustomerId");

				b.HasIndex("OrganizationId");

				b.ToTable("Sales");
			});

			modelBuilder.Entity("DebtManagerApp.Data.SaleItem", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("integer");

				NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

				b.Property<bool>("IsDeleted")
					.HasColumnType("boolean");

				b.Property<int>("ProductId")
					.HasColumnType("integer");

				b.Property<int>("Quantity")
					.HasColumnType("integer");

				b.Property<int>("SaleId")
					.HasColumnType("integer");

				b.Property<decimal>("UnitPrice")
					.HasColumnType("decimal(18, 2)");

				b.HasKey("Id");

				b.HasIndex("ProductId");

				b.HasIndex("SaleId");

				b.ToTable("SaleItems");
			});

			modelBuilder.Entity("DebtManagerApp.Data.ShoppingListItem", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("integer");

				NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

				b.Property<DateTime>("AddedDate")
					.HasColumnType("timestamp with time zone");

				b.Property<string>("Description")
					.IsRequired()
					.HasMaxLength(500)
					.HasColumnType("character varying(500)");

				b.Property<bool>("IsDeleted")
					.HasColumnType("boolean");

				b.Property<bool>("IsPurchased")
					.HasColumnType("boolean");

				b.Property<int>("OrganizationId")
					.HasColumnType("integer");

				b.Property<decimal?>("Price")
					.HasColumnType("decimal(18, 2)");

				b.Property<int>("Quantity")
					.HasColumnType("integer");

				b.HasKey("Id");

				b.ToTable("ShoppingListItems");
			});

			modelBuilder.Entity("DebtManagerApp.Data.Transaction", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("integer");

				NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

				b.Property<decimal>("Amount")
					.HasColumnType("decimal(18, 2)");

				b.Property<int?>("CustomerId")
					.HasColumnType("integer");

				b.Property<DateTime>("Date")
					.HasColumnType("timestamp with time zone");

				b.Property<bool>("IsDeleted")
					.HasColumnType("boolean");

				b.Property<string>("Notes")
					.HasMaxLength(1000)
					.HasColumnType("character varying(1000)");

				b.Property<int>("OrganizationId")
					.HasColumnType("integer");

				b.Property<int?>("ProductId")
					.HasColumnType("integer");

				b.Property<int>("Type")
					.HasColumnType("integer");

				b.HasKey("Id");

				b.HasIndex("CustomerId");

				b.HasIndex("OrganizationId");

				b.HasIndex("ProductId");

				b.ToTable("Transactions");
			});

			modelBuilder.Entity("DebtManagerApp.Data.User", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("integer");

				NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

				b.Property<DateTime>("CreatedAt")
					.HasColumnType("timestamp with time zone");

				b.Property<string>("Email")
					.IsRequired()
					.HasColumnType("text");

				b.Property<string>("FullName")
					.HasColumnType("text");

				b.Property<bool>("IsDeleted")
					.HasColumnType("boolean");

				b.Property<int>("OrganizationId")
					.HasColumnType("integer");

				b.Property<string>("PasswordHash")
					.IsRequired()
					.HasColumnType("text");

				b.Property<string>("RefreshToken")
					.HasColumnType("text");

				b.Property<DateTime?>("RefreshTokenExpiryTime")
					.HasColumnType("timestamp with time zone");

				b.Property<int>("Role")
					.HasColumnType("integer");

				b.Property<string>("Username")
					.IsRequired()
					.HasMaxLength(256)
					.HasColumnType("character varying(256)");

				b.HasKey("Id");

				b.HasIndex("OrganizationId");

				b.HasIndex("Username")
					.IsUnique();

				b.ToTable("Users");
			});

			modelBuilder.Entity("DebtManagerApp.Data.Category", b =>
			{
				b.HasOne("DebtManagerApp.Data.Organization", "Organization")
					.WithMany("Categories")
					.HasForeignKey("OrganizationId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();

				b.HasOne("DebtManagerApp.Data.Category", "ParentCategory")
					.WithMany()
					.HasForeignKey("ParentCategoryId")
					.OnDelete(DeleteBehavior.Restrict);

				b.Navigation("Organization");

				b.Navigation("ParentCategory");
			});

			modelBuilder.Entity("DebtManagerApp.Data.Customer", b =>
			{
				b.HasOne("DebtManagerApp.Data.Organization", "Organization")
					.WithMany("Customers")
					.HasForeignKey("OrganizationId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();

				b.Navigation("Organization");
			});

			modelBuilder.Entity("DebtManagerApp.Data.OrganizationSettings", b =>
			{
				b.HasOne("DebtManagerApp.Data.Organization", "Organization")
					.WithOne("Settings")
					.HasForeignKey("DebtManagerApp.Data.OrganizationSettings", "OrganizationId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();

				b.Navigation("Organization");
			});

			modelBuilder.Entity("DebtManagerApp.Data.Product", b =>
			{
				b.HasOne("DebtManagerApp.Data.Category", "Category")
					.WithMany("Products")
					.HasForeignKey("CategoryId")
					.OnDelete(DeleteBehavior.SetNull);

				b.HasOne("DebtManagerApp.Data.Organization", "Organization")
					.WithMany("Products")
					.HasForeignKey("OrganizationId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();

				b.Navigation("Category");

				b.Navigation("Organization");
			});

			modelBuilder.Entity("DebtManagerApp.Data.Sale", b =>
			{
				b.HasOne("DebtManagerApp.Data.Customer", "Customer")
					.WithMany()
					.HasForeignKey("CustomerId");

				b.HasOne("DebtManagerApp.Data.Organization", "Organization")
					.WithMany("Sales")
					.HasForeignKey("OrganizationId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();

				b.Navigation("Customer");

				b.Navigation("Organization");
			});

			modelBuilder.Entity("DebtManagerApp.Data.SaleItem", b =>
			{
				b.HasOne("DebtManagerApp.Data.Product", "Product")
					.WithMany("SaleItems")
					.HasForeignKey("ProductId")
					.OnDelete(DeleteBehavior.Restrict)
					.IsRequired();

				b.HasOne("DebtManagerApp.Data.Sale", "Sale")
					.WithMany("SaleItems")
					.HasForeignKey("SaleId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();

				b.Navigation("Product");

				b.Navigation("Sale");
			});

			modelBuilder.Entity("DebtManagerApp.Data.Transaction", b =>
			{
				b.HasOne("DebtManagerApp.Data.Customer", "Customer")
					.WithMany("Transactions")
					.HasForeignKey("CustomerId")
					.OnDelete(DeleteBehavior.Cascade);

				b.HasOne("DebtManagerApp.Data.Organization", "Organization")
					.WithMany("Transactions")
					.HasForeignKey("OrganizationId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();

				b.HasOne("DebtManagerApp.Data.Product", "Product")
					.WithMany()
					.HasForeignKey("ProductId")
					.OnDelete(DeleteBehavior.SetNull);

				b.Navigation("Customer");

				b.Navigation("Organization");

				b.Navigation("Product");
			});

			modelBuilder.Entity("DebtManagerApp.Data.User", b =>
			{
				b.HasOne("DebtManagerApp.Data.Organization", "Organization")
					.WithMany("Users")
					.HasForeignKey("OrganizationId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();

				b.Navigation("Organization");
			});

			modelBuilder.Entity("DebtManagerApp.Data.Category", b =>
			{
				b.Navigation("Products");
			});

			modelBuilder.Entity("DebtManagerApp.Data.Customer", b =>
			{
				b.Navigation("Transactions");
			});

			modelBuilder.Entity("DebtManagerApp.Data.Organization", b =>
			{
				b.Navigation("Categories");

				b.Navigation("Customers");

				b.Navigation("Products");

				b.Navigation("Sales");

				b.Navigation("Settings")
					.IsRequired();

				b.Navigation("Transactions");

				b.Navigation("Users");
			});

			modelBuilder.Entity("DebtManagerApp.Data.Product", b =>
			{
				b.Navigation("SaleItems");
			});

			modelBuilder.Entity("DebtManagerApp.Data.Sale", b =>
			{
				b.Navigation("SaleItems");
			});
#pragma warning restore 612, 618
		}
	}
}
